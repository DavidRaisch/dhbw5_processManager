\glsdefs@newdocentry{Glossareintrag}%
{%
name={Glossareintrag},%
sort={Glossareintrag},%
type={main},%
first={Glossareintrag},%
firstplural={Glossareinträge},%
text={Glossareintrag},%
plural={Glossareinträge},%
description={Ein Glossar beschreibt verschiedenste Dinge in kurzen Worten},%
descriptionplural={Ein Glossar beschreibt verschiedenste Dinge in kurzen Worten},%
symbol={\relax },%
symbolplural={\relax },%
user1={},%
user2={},%
user3={},%
user4={},%
user5={},%
user6={},%
long={},%
longplural={},%
short={},%
shortplural={},%
counter={page},%
parent={},%
%
}%

\glsdefs@newdocentry{Async}%
{%
name={Asynchrone Programmierung},%
sort={Asynchrone Programmierung},%
type={main},%
first={Asynchrone Programmierung},%
firstplural={Asynchrone Programmierung},%
text={Asynchrone Programmierung},%
plural={Asynchrone Programmierung},%
description={Asynchrone Programmierung bezeichnet ein Programmierparadigma, bei dem Funktionen nicht-blockierend ausgeführt werden. Anstatt auf das Ergebnis einer Operation (z.\ B.\ einer Datenbankabfrage oder Netzwerkkommunikation) zu warten und dabei den Programmfluss anzuhalten, wird die Ausführung fortgesetzt und das Ergebnis später verarbeitet, sobald es verfügbar ist. In JavaScript erfolgt dies typischerweise durch async/await. Dieses Konzept erhöht die Effizienz und Reaktionsfähigkeit von Anwendungen, insbesondere im Kontext von I/O-lastigen Operationen wie Datenbankzugriffen oder API-Anfragen.},%
descriptionplural={Asynchrone Programmierung bezeichnet ein Programmierparadigma, bei dem Funktionen nicht-blockierend ausgeführt werden. Anstatt auf das Ergebnis einer Operation (z.\ B.\ einer Datenbankabfrage oder Netzwerkkommunikation) zu warten und dabei den Programmfluss anzuhalten, wird die Ausführung fortgesetzt und das Ergebnis später verarbeitet, sobald es verfügbar ist. In JavaScript erfolgt dies typischerweise durch async/await. Dieses Konzept erhöht die Effizienz und Reaktionsfähigkeit von Anwendungen, insbesondere im Kontext von I/O-lastigen Operationen wie Datenbankzugriffen oder API-Anfragen.},%
symbol={\relax },%
symbolplural={\relax },%
user1={},%
user2={},%
user3={},%
user4={},%
user5={},%
user6={},%
long={},%
longplural={},%
short={},%
shortplural={},%
counter={page},%
parent={},%
%
}%

\glsdefs@newdocentry{Docker}%
{%
name={Docker},%
sort={Docker},%
type={main},%
first={Docker},%
firstplural={Docker},%
text={Docker},%
plural={Docker},%
description={Docker ist eine Open-Source-Plattform zur Containerisierung von Anwendungen. Sie ermöglicht es, Software samt aller benötigten Abhängigkeiten und Konfigurationen in standardisierten Containern zu isolieren und auszuführen. Diese Container laufen unabhängig vom zugrunde liegenden Betriebssystem und bieten dadurch eine konsistente und reproduzierbare Ausführungsumgebung über verschiedene Systeme hinweg. Docker wird insbesondere für Entwicklung, Test und Deployment eingesetzt, da es die Portabilität von Anwendungen erhöht, manuelle Konfigurationsaufwände reduziert und die Integration in automatisierte Bereitstellungsprozesse (CI/CD) erleichtert.},%
descriptionplural={Docker ist eine Open-Source-Plattform zur Containerisierung von Anwendungen. Sie ermöglicht es, Software samt aller benötigten Abhängigkeiten und Konfigurationen in standardisierten Containern zu isolieren und auszuführen. Diese Container laufen unabhängig vom zugrunde liegenden Betriebssystem und bieten dadurch eine konsistente und reproduzierbare Ausführungsumgebung über verschiedene Systeme hinweg. Docker wird insbesondere für Entwicklung, Test und Deployment eingesetzt, da es die Portabilität von Anwendungen erhöht, manuelle Konfigurationsaufwände reduziert und die Integration in automatisierte Bereitstellungsprozesse (CI/CD) erleichtert.},%
symbol={\relax },%
symbolplural={\relax },%
user1={},%
user2={},%
user3={},%
user4={},%
user5={},%
user6={},%
long={},%
longplural={},%
short={},%
shortplural={},%
counter={page},%
parent={},%
%
}%

